资源分离的原因:
主要是为了资源的复用性. 我们把FBX资源分离为模型, 材质, 纹理, 动画, mod(模型组织文件). 
如此这几个部分的资源就可以实现共用.


资源聚合的需求:
带来分离好处的同时, 缺点也很明显. 分离为多个资源后, 下载时, 每个文件都是一个独立的http请求. 
导致下载的文件数多, 很多还是小文件, 自然时间就长. 所以就有聚合的要求. 这导致了, 我们需要在
资源数和总文件大小有个平衡.


实际情况举例:
1把椅子, 由于他的资源(模型,贴图,动画等)其他资源基本不会用到, 所以一般情况, 椅子不需要资源分离.
如果需要换材质? 怎么办? 这是个艰难的选择.

对于男女主角, 涉及到换装等, 所以, 所有资源都应该是分离的.

对于户型, 户型文件比较特殊, 会有多个模型在一个FBX. 户型的模型是没必要分离的, 因为不会换. 但是
贴图却是要分离的, 因为房屋的壁纸肯定是都是共享的.


命名冲突与共享:
文件的共享方式就是, 就是文件名完全一致, 2个完全一致的文件名, 我们就认为是同一个资源.
所以在资源导出时, 需要注意防止命名冲突.


开发需求:
根据上述的情况, 我们需要生成控制面板实现如下选择.
针对fbx:
# 不分离				@基本都用这种方式
# 打包角色动画	@把角色对应的动画都打成一个包, 多个assert, 这个只用于主角的动作. 命名为: 文件名.anis.u3d

废弃的方案:
//# mesh | 动画 | mod(其他信息)   @角色的衣服应用会比较多. 可以换皮肤和共享骨骼动画.
//# mesh,动画 | mod(其他信息)	@家具, 场景物件等. 需要换皮肤的物件.  猫狗类动物. 需要换皮肤, 又没共享骨骼动画的物件.
//# 房屋分离			@不提供这种方式. 房屋就是不分离.
//# 动画 | mod(其他信息)		@为共享模型的主角多动作时候使用. 如果是换皮肤可以配合换材质处理.
//# 完全分离. 	

特别申明:如果动画名字有auto, 则动画必须和mesh绑定. (我定义auto是自动动画, 如果这个动画也能导出, 
出现重名相互覆盖的问题, 所以, 有auto动画的, 上面的方案需要有对应的调整)


针对材质:
# 不分离			@需要换材质的方案. 比如换壁纸, 换皮肤.
材质部分规则可能需要改, 我们不通过mod的方式来处理.

废弃的方案:
//# mat | 主纹理.			@需要换材质且需要纹理共享的情况. 这种需求比较少把.

针对纹理:
# 不分离 (也没的分)


针对预制件:
# 不分离 (以后有需求再说)



mod文件的设计目的:
我们需要一个自定义的模型文件格式, 而针对这个文件格式, 用户有统一的调用接口. 优点如下:
1. 我们可以改变mod内部的文件布局而不影响到用户使用. 比如把资源拆分.
2. 我们目前把fbx的导出作为mod, 以后可能也会支持游戏内的GameObject导出mod, 可能会变更预制件导出为mod. 我们把这些变化都统一在mod内部.
3. 我们可能还会加入一些自己的东西, 比如一些数据. 不过这个好像预制件也可以.


命名规则:
如果一个资源被分离为几个部分, 则命名按如下优先级命名. 取优先级高的名字. (nnd, 很拗口).
比如, 模型不分离, 则是mod应的名字. 如果mesh,mat,texture打包, 则是mesh名字. 如果mat,texture打包, 则是mat名字.

优先级:
mod > mesh > mat > texture
           > ani
不应该出现, 只有mat,texture 和 ani并存的情况.


补充:
对于使用者的规范, 我会另外出文档. 以后出.